name: Front End of Node JS Application - CD
on: [push]
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'starter/frontend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend/

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install Dependencies
      run: npm ci

    - name: Run Tests
      run: npm test # Adjust the test script as per your project
  
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend/

    needs: test   # This job depends on the "build" job

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

    - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: prj4-capston
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    # - name: Build the image
    #   run: |
    #     docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:${{ github.sha }} .
    #     docker run --name mp-frontend -p 3000:3000 -d mp-frontend:${{ github.sha }}

  # terraform:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./starter/frontend/k8s/

  #   needs: build   # This job depends on the "build" job

  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v3
  #     with:
  #       role-to-assume: arn:aws:iam::111111111111:role/my-github-actions-role-test
  #       aws-region: us-east-1
    
  #   - name: Terraform Set-up
  #     uses: hashicorp/setup-terraform@v2
    
